Node.js

Node.js란?
Javascript 런타임
Javascript를 실행하려면 별도의 버전은 없지만 일정한 사양(ECMAScript 사양)을 갖춰야 함
기존 javascript는 사양을 갖추고 갖추고 Chrome, Safari, IE 등의 브라우저에 실행해야 했음
but Node는 브라우저 밖에서 작동되는 javascript 실행환경으로 브라우저를 열지 않고 실행가능하게 함
이로 인해 다른 언어들과의 상호작용을 실행할 수 있음
그러나 Node.js는 dom객체나 이벤트 등을 사용할 수 없다.



Node.js 용도
풀 스택 애플리케이션을 만들기 위한 장치
프레임워크로는 Express가 있음
이걸 사용해서 javascript 코드로 앱을 만들 수 있음
즉, 브라우저와 네이티브 앱에서도 사용 가능
ex) twitch, VSCode 등도 Node를 사용

Web Servers
Command Line Tools
Native Apps(VSCode is a Node app)
Video Games
Drone Software
등등


Node.js 설치

https://nodejs.org/en/ 접속

컴퓨터에 맞는 걸 선택해서 다운로드, 접속하면 자동으로 알려줌

왼쪽 LTS 다운(최신버전으로 할 필요는 없음)

원하는 경로로 자유롭게 설치

cmd창에 입력

C:\Users\skeh0>node
Welcome to Node.js v18.12.1.
Type ".help" for more information.
>

결과와 같이 나온다면 node.js 설치 끝

git bash에 node 입력
skeh0@pyun MINGW64 ~
$ node
Welcome to Node.js v18.12.1.
Type ".help" for more information.
>

이후 crtl+c를 두번 누르면 node.js 종료
ex) crtl+c 한번 눌렀을 때
(To exit, press Ctrl+C again or Ctrl+D or type .exit)
>

NodeREPL
REPL : Read Evaluate Print Loop
브라우저의 javascript 콘솔은 REPL임
브라우저에서 스크립트를 열고 실행함, 뭔가를 출력하고 반복함
Chrome에 javascript console과 REPL은 개념이 같음

단, javascript 콘솔에 접근할 수 없는 명령어를 REPL 에서 사용가능

skeh0@pyun MINGW64 ~
$ node
Welcome to Node.js v18.12.1.
Type ".help" for more information.
> .help
.break    Sometimes you get stuck, this gets you out
.clear    Alias for .break
.editor   Enter editor mode
.exit     Exit the REPL
.help     Print this help message
.load     Load JS from a file into the REPL session
.save     Save all evaluated commands in this REPL session to a file

Press Ctrl+C to abort current expression, Ctrl+D to exit the REPL
> .exit


브라우저에 있지만 Node에 없는 기능
1. 문서객체모델(DOM) API가 없음 , 즉 window와 document가 존재하지 않음(명령어에 입력해도 나타나지 않음)
대신 전역객체인 global 은 사용가능
> global
<ref *1> Object [global] {
  global: [Circular *1],
  queueMicrotask: [Function: queueMicrotask],
  clearImmediate: [Function: clearImmediate],
  setImmediate: [Function: setImmediate] {
    [Symbol(nodejs.util.promisify.custom)]: [Getter]
  },
  structuredClone: [Function: structuredClone],
  clearInterval: [Function: clearInterval],
  clearTimeout: [Function: clearTimeout],
  setInterval: [Function: setInterval],
  setTimeout: [Function: setTimeout] {
    [Symbol(nodejs.util.promisify.custom)]: [Getter]
  },
  atob: [Function: atob],
  btoa: [Function: btoa],
  performance: Performance {
    nodeTiming: PerformanceNodeTiming {
      name: 'node',
      entryType: 'node',
      startTime: 0,
      duration: 155549.88789999858,
      nodeStart: 2.159699998795986,
      v8Start: 4.932099997997284,
      bootstrapComplete: 29.84339999780059,
      environment: 16.349899999797344,
      loopStart: 44.654599998146296,
      loopExit: -1,
      idleTime: 155453.6558
    },
    timeOrigin: 1671456185561.247
  },
  fetch: [AsyncFunction: fetch]
}


ex) setTimeout
> setTimeout(()=>console.log("HELLO!!!!!"),3000)
Timeout {
  _idleTimeout: 3000,
  _idlePrev: [TimersList],
  _idleNext: [TimersList],
  _idleStart: 252827,
  _onTimeout: [Function (anonymous)],
  _timerArgs: undefined,
  _repeat: null,
  _destroyed: false,
  [Symbol(refed)]: true,
  [Symbol(kHasPrimitive)]: false,
  [Symbol(asyncId)]: 333,
  [Symbol(triggerId)]: 5
}
> HELLO!!!!! // 3초뒤 출력



자동완성 : tab키 사용

Node JS는 전부 내장 모듈이고 이 모듈을 사용하여 운영 체제와 파일과 폴더를 다룸

터미널로 js파일을 만든 후 vscode실행
skeh0@pyun MINGW64 ~/OneDrive/바탕 화면/WebDev/practice/practice (main)
$ touch firstScript.js

vscode에서 javascript를 실행하려면 코드를 작성 후 브라우저를 열어서 확인해야함
for (let i = 0; i < 10; i++) {
    console.log("Hello From First Script!!")
}

but node는 브라우저를 실행하지 않아도 작동할 수 있음
"node 실행파일.확장자" 를 넣으면 바로 실행됨

skeh0@pyun MINGW64 ~/OneDrive/바탕 화면/WebDev/practice/practice (main)
$ node firstScript.js
Hello From First Script!!
Hello From First Script!!
Hello From First Script!!
Hello From First Script!!
Hello From First Script!!
Hello From First Script!!
Hello From First Script!!
Hello From First Script!!
Hello From First Script!!
Hello From First Script!!

오류를 작성할 시 오류발생되었다고 출력함

Node.js에 자세한 정보는 https://nodejs.org/dist/latest-v18.x/docs/api/documentation.html 를 통해 볼 수 있음

모듈 사용하기

Process
Node에 사용하는 객체
전역 범위에 있음
현재 실행하는 Node.js를 통제하는 메서드(Node 버전과 같은 정보를 가지고 있음)


> process
process {
  version: 'v18.12.1',
  versions: {
    node: '18.12.1',
    v8: '10.2.154.15-node.12',
    uv: '1.43.0',
    zlib: '1.2.11',
    brotli: '1.0.9',
    ares: '1.18.1',
    modules: '108',
    nghttp2: '1.47.0',
    napi: '8',
    llhttp: '6.0.10',
    openssl: '3.0.7+quic',
    cldr: '41.0',
    icu: '71.1',
    tz: '2022b',
    unicode: '14.0',
    ngtcp2: '0.8.1',
    nghttp3: '0.7.0'
  },
  arch: 'x64',
  platform: 'win32',
  release: {
    name: 'node',
    lts: 'Hydrogen',

..... 이하 생략(객체가 많음)

내가 사용한 버전 확인
> process.version
'v18.12.1'

내 릴리스 정보 확인
> process.release
{
  name: 'node',
  lts: 'Hydrogen',
  sourceUrl: 'https://nodejs.org/download/release/v18.12.1/node-v18.12.1.tar.gz'
,
  headersUrl: 'https://nodejs.org/download/release/v18.12.1/node-v18.12.1-header
s.tar.gz',
  libUrl: 'https://nodejs.org/download/release/v18.12.1/win-x64/node.lib'
}

현재 작업 디렉토리 확인
> process.cwd()
'C:\\Users\\skeh0'

node 경로확인
> process.argv
[ 'C:\\Program Files\\nodejs\\node.exe' ]


.exit후 터미널로 파일 생성 후 VSCode로 파일열기

skeh0@pyun MINGW64 ~/OneDrive/바탕 화면/WebDev/practice/practice (main)
$ touch args.js

vscode로 args.js파일에서 작성
console.log("Hello From Args File!!")

이후 node로 호출
skeh0@pyun MINGW64 ~/OneDrive/바탕 화면/WebDev/practice/practice (main)
$ node args.js
Hello From Args File!!

호출이 잘 되었다면 이번엔 process를 출력

vscode로 args.js파일에서 작성
console.log("Hello From Args File!!")
console.log(process.argv)

skeh0@pyun MINGW64 ~/OneDrive/바탕 화면/WebDev/practice/practice (main)
$ node args.js
Hello From Args File!!
[
  'C:\\Program Files\\nodejs\\node.exe',
  'C:\\Users\\skeh0\\OneDrive\\바탕 화면\\WebDev\\practice\\practice\\args.js'
]

배열의 첫번째 값은 node경로, 두번째 값은 args.js경로를 의미

참고) process.argv 원문
The process.argv property returns an array containing the command-line arguments passed when the Node.js process was launched. 
The first element will be process.execPath. See process.argv0 if access to the original value of argv[0] is needed. 
The second element will be the path to the JavaScript file being executed. The remaining elements will be any additional command-line arguments.

process.argv는 인자가 몇개든 받아들임
skeh0@pyun MINGW64 ~/OneDrive/바탕 화면/WebDev/practice/practice (main)
$ node args.js cat dog lion
Hello From Args File!!
[
  'C:\\Program Files\\nodejs\\node.exe',
  'C:\\Users\\skeh0\\OneDrive\\바탕 화면\\WebDev\\practice\\practice\\args.js',
  'cat',
  'dog',
  'lion'
]

띄어쓰기로 인해 인자를 여러개 입력

이를 이용해서 스크립트를 만들수 있음

greeter.js생성
skeh0@pyun MINGW64 ~/OneDrive/바탕 화면/WebDev/practice/practice (main)
$ touch greeter.js

vscode로 greeter.js파일 작성
const args = process.argv.slice(2); // argv의 처음 요소 두개는 무시(경로임)
for (let arg of args) {
    console.log(`Hi there, ${arg}`)
}

node 실행
skeh0@pyun MINGW64 ~/OneDrive/바탕 화면/WebDev/practice/practice (main)
$ node greeter.js pyun kong
Hi there, pyun
Hi there, kong



File System
파일 생성, 읽기, 추가 등 여러 메서드를 사용
파일을 읽거나 폴더를 생성하는 메서드나 삭제하는 메서드에는 동기, 비동기 방식으로 두가지가 존재

fs.mkdir 사용
fs를 사용하려면 require('fs'); 가 필요

touch boilerplate.js 로 파일 생성후 vscode에 작성
const fs = require('fs'); // fs를 사용하려면 작성
console.log(fs)

node실행
skeh0@pyun MINGW64 ~/OneDrive/바탕 화면/WebDev/practice/practice (main)
$ node boilerplate.js
{
  appendFile: [Function: appendFile],
  appendFileSync: [Function: appendFileSync],
  access: [Function: access],
  accessSync: [Function: accessSync],
  chown: [Function: chown],
  chownSync: [Function: chownSync],
  chmod: [Function: chmod],
  chmodSync: [Function: chmodSync],
  close: [Function: close],
  closeSync: [Function: closeSync],
  copyFile: [Function: copyFile],
  copyFileSync: [Function: copyFileSync],
  cp: [Function: cp],
  cpSync: [Function: cpSync],
  createReadStream: [Function: createReadStream],
  createWriteStream: [Function: createWriteStream],
  exists: [Function: exists],
  existsSync: [Function: existsSync],
  fchown: [Function: fchown],
  fchownSync: [Function: fchownSync],
  fchmod: [Function: fchmod],
  fchmodSync: [Function: fchmodSync],
  fdatasync: [Function: fdatasync],
  fdatasyncSync: [Function: fdatasyncSync],
  fstat: [Function: fstat],
  fstatSync: [Function: fstatSync],
  fsync: [Function: fsync],
  fsyncSync: [Function: fsyncSync],
  ftruncate: [Function: ftruncate],
  ftruncateSync: [Function: ftruncateSync],
  futimes: [Function: futimes],
  futimesSync: [Function: futimesSync],
  lchown: [Function: lchown],
  lchownSync: [Function: lchownSync],
  lchmod: undefined,
  lchmodSync: undefined,
  link: [Function: link],
  linkSync: [Function: linkSync],
  lstat: [Function: lstat],
  lstatSync: [Function: lstatSync],
  lutimes: [Function: lutimes],
  lutimesSync: [Function: lutimesSync],
  mkdir: [Function: mkdir],
  mkdirSync: [Function: mkdirSync],
  mkdtemp: [Function: mkdtemp],
  mkdtempSync: [Function: mkdtempSync],
  open: [Function: open],
  openSync: [Function: openSync],
  opendir: [Function: opendir],
  opendirSync: [Function: opendirSync],
  readdir: [Function: readdir],
  readdirSync: [Function: readdirSync],
  read: [Function: read],

.... 이하 생략

다시 vscode에 작성
비동기식 mkdir
const fs = require('fs'); // fs를 사용하려면 작성
//console.log(fs)

// https://nodejs.org/dist/latest-v18.x/docs/api/fs.html#fsmkdirpath-options-callback 참조
fs.mkdir('Dogs', { recursive: true }, (err) => {
    console.log('CallBack!!')
    if (err) throw err; // 에러가 발생할 경우 출력
});

console.log("I Come After MKDIR")


node 실행
skeh0@pyun MINGW64 ~/OneDrive/바탕 화면/WebDev/practice/practice (main)
$ node boilerplate.js
I Come After MKDIR
CallBack!!

해당 파일을 읽어 디렉토리가 생성되고 생성된 후 콜백이 실행됨

Dogs/ 디렉토리가 있는지 확인
skeh0@pyun MINGW64 ~/OneDrive/바탕 화면/WebDev/practice/practice (main)
$ ls
 01_네이버_주식현재가_크롤링/   greeter.js
 02_파이썬엑셀다루기/           html+css정리.txt
 03_네이버_쇼핑_크롤링/        'javascript extends and super.html'
 Dogs/                          javascript정리.txt
'NodeJS 정리.txt'               js연습.html
 SearchTvShow.html              makeEditor.html
 SearchTvShow.js                makeTag.html
 args.js                        objectarray.js
 boilerplate.js                 pagination.html
 bootstrap/                     practice.html
 changeFontSize.html            practice.js
 checkbox.html                  python/
 checkbox.js                    todolist2.html
 firstScript.js                '체크박스 전체 체크.txt'


비동기식 mkdir
vscode작성
const fs = require('fs'); // fs를 사용하려면 작성
// 동기식 mkdir
fs.mkdirSync('Cats');
console.log("I Come After MKDIR")

node실행
skeh0@pyun MINGW64 ~/OneDrive/바탕 화면/WebDev/practice/practice (main)
$ node boilerplate.js
I Come After MKDIR

Cats/ 디렉토리가 있는지 확인
skeh0@pyun MINGW64 ~/OneDrive/바탕 화면/WebDev/practice/practice (main)
$ ls
 01_네이버_주식현재가_크롤링/   greeter.js
 02_파이썬엑셀다루기/           html+css정리.txt
 03_네이버_쇼핑_크롤링/        'javascript extends and super.html'
 Cats/                          javascript정리.txt
'NodeJS 정리.txt'               js연습.html
 SearchTvShow.html              makeEditor.html
 SearchTvShow.js                makeTag.html
 args.js                        objectarray.js
 boilerplate.js                 pagination.html
 bootstrap/                     practice.html
 changeFontSize.html            practice.js
 checkbox.html                  python/
 checkbox.js                    todolist2.html
 firstScript.js                '체크박스 전체 체크.txt'


현재 상황에서는 비동기식, 동기식 디렉토리 성이 차이가 없지만 코드를 추갛기 전에 디렉토리를 만들어야 하는 경우 동기 메서드를 사용하면 된다.
단, 동기식 디렉토리 생성은 콜백이 없으므로 try-catch문을 사용해야함

디렉토리 이름 인자로 받아 mkdir
vscode작성
const fs = require('fs'); // fs를 사용하려면 작성
const folderName = process.argv[2] || "Project" // 디폴트로 undefind인 경우 Project가 파일이름임 
fs.mkdirSync(folderName);

skeh0@pyun MINGW64 ~/OneDrive/바탕 화면/WebDev/practice/practice (main)
$ node boilerplate.js Chickens

Chickens 디렉토리가 생성되었는지 확인
skeh0@pyun MINGW64 ~/OneDrive/바탕 화면/WebDev/practice/practice (main)
$ ls
 01_네이버_주식현재가_크롤링/   greeter.js
 02_파이썬엑셀다루기/           html+css정리.txt
 03_네이버_쇼핑_크롤링/        'javascript extends and super.html'
 Cats/                          javascript정리.txt
 Chickens/                      js연습.html
'NodeJS 정리.txt'               makeEditor.html
 SearchTvShow.html              makeTag.html
 SearchTvShow.js                objectarray.js
 args.js                        pagination.html
 boilerplate.js                 practice.html
 bootstrap/                     practice.js
 changeFontSize.html            python/
 checkbox.html                  todolist2.html
 checkbox.js                   '체크박스 전체 체크.txt'
 firstScript.js

기본 디폴트 값으로 Project 디렉토리가 생성되는지 확인
skeh0@pyun MINGW64 ~/OneDrive/바탕 화면/WebDev/practice/practice (main)
$ node boilerplate.js

Project 디렉토리가 생성되었는지 확인
skeh0@pyun MINGW64 ~/OneDrive/바탕 화면/WebDev/practice/practice (main)
$ ls
 01_네이버_주식현재가_크롤링/   firstScript.js
 02_파이썬엑셀다루기/           greeter.js
 03_네이버_쇼핑_크롤링/         html+css정리.txt
 Cats/                         'javascript extends and super.html'
 Chickens/                      javascript정리.txt
'NodeJS 정리.txt'               js연습.html
 Project/                       makeEditor.html
 SearchTvShow.html              makeTag.html
 SearchTvShow.js                objectarray.js
 args.js                        pagination.html
 boilerplate.js                 practice.html
 bootstrap/                     practice.js
 changeFontSize.html            python/
 checkbox.html                  todolist2.html
 checkbox.js                   '체크박스 전체 체크.txt'



writeFile
파일에 데이터를 기록하거나 기존 파일을 대체

fs.writeFileSync('대상파일', '내용')

vscode 작성
const fs = require('fs'); // fs를 사용하려면 작성
const folderName = process.argv[2] || "Project" // 디폴트로 undefind인 경우 Project가 파일이름임 

// 동기식 mkdir
fs.mkdirSync(folderName);
fs.writeFileSync(`${folderName}/index.html`, '') // 내용을 넣는 부분도 넣어야함, 빈 공백일 경우 '' 입력
fs.writeFileSync(`${folderName}/apps.js`, '')
fs.writeFileSync(`${folderName}/styles.css`, '')

node 실행

skeh0@pyun MINGW64 ~/OneDrive/바탕 화면/WebDev/practice/practice (main)
$ node boilerplate.js ProPro

skeh0@pyun MINGW64 ~/OneDrive/바탕 화면/WebDev/practice/practice (main)
$ ls
 01_네이버_주식현재가_크롤링/   greeter.js
 02_파이썬엑셀다루기/           html+css정리.txt
 03_네이버_쇼핑_크롤링/        'javascript extends and super.html'
'NodeJS 정리.txt'               javascript정리.txt
 ProPro/                        js연습.html
 SearchTvShow.html              makeEditor.html
 SearchTvShow.js                makeTag.html
 args.js                        objectarray.js
 boilerplate.js                 pagination.html
 bootstrap/                     practice.html
 changeFontSize.html            practice.js
 checkbox.html                  python/
 checkbox.js                    todolist2.html
 firstScript.js                '체크박스 전체 체크.txt'

skeh0@pyun MINGW64 ~/OneDrive/바탕 화면/WebDev/practice/practice (main)
$ cd ProPro

skeh0@pyun MINGW64 ~/OneDrive/바탕 화면/WebDev/practice/practice/ProPro (main)
$ ls
apps.js  index.html  styles.css


주의해야 할 점은 스크립트에 있는 위치에 파일이 생성되는 것이 아니라 node를 실행한 위치에서 파일이 생성됨

try - catch문 사용

// 동기식 mkdir
try {
    fs.mkdirSync(folderName);
    fs.writeFileSync(`${folderName}/index.html`, '')
    fs.writeFileSync(`${folderName}/apps.js`, '')
    fs.writeFileSync(`${folderName}/styles.css`, '')
} catch (e) {
    console.log("something went wrong!!")
    console.log(e)
}




module.export사용하기
다른 파일에 있는 객체를 사용하는 방법임

vscode에서 math.js작성
const add = (x, y) => x + y

const PI = 3.14159;

const square = x => x * x;

module.exports.add = add;
module.exports.PI = PI;
module.exports.square = square;


vscode에서 app.js작성
//fs가 아닌 다른 모듈을 require할때는 ./ 를 붙여야함
const math = require('./math');
//math모듈의 객체를 출력함
// node app.js를 하면 결과값 출력
console.log(math.PI)
console.log(math.square(9))

node 실행
skeh0@pyun MINGW64 ~/OneDrive/바탕 화면/WebDev/practice/practice (main)
$ node app.js
3.14159
81

구조분해할당도 가능
const { PI, square } = require('./math');

console.log(PI)
console.log(square(9))

node를 실행하면 같은 값이 나옴
skeh0@pyun MINGW64 ~/OneDrive/바탕 화면/WebDev/practice/practice (main)
$ node app.js
3.14159
81


디렉토리로도 모듈을 export할 수 있음
shelter디렉토리를 만들고 kong.js, pang.js , dong.js 만들기

shelter/kong.js
module.exports = {
    name: 'kong',
    color: 'white',
}


shelter/pang.js
module.exports = {
    name: 'pang',
    color: 'black',
}

shelter/dong.js
module.exports = {
    name: 'dong',
    color: 'brown',
}

이후 세 파일을 통합하는 index.js를 생성하여 작성
shelter.index.js
const dong = require('./dong');
const kong = require('./kong');
const pang = require('./pang');

const allDogs = [dong, kong, pang];

//console.log(allDogs);

module.exports = allDogs;

다른 디렉토리에 있는 app.js에 작성
const dogs = require('./shelter')
console.log("Required an entire Directory!", dogs);
//shelter/index.js파일에 있는 module.exports부분을 출력함

node로 app.js 실행
skeh0@pyun MINGW64 ~/OneDrive/바탕 화면/WebDev/practice/practice/NodeJSPractice (main)
$ node app.js
Required an entire Directory! [
  { name: 'dong', color: 'brown' },
  { name: 'kong', color: 'white' },
  { name: 'pang', color: 'black' }
]


npm
Node Package Manager
여러 개발자들이 공개해놓은 무료로 사용할 수 있는 많은 패키지로 된 라이브러리
명령줄 도구로 도구를 사용해서 패키지들을 손쉽게 설치하고 관리할 수 있음

node를 다운했다면 npm은 자동으로 다운로드


패키지 다운로드
npm install 패키지명
패키지명은 npm 에서 이름을 확인한 후 등록되어있는 이름으로 설치

give-me-a-joke : 농담을 랜덤으로 만들어줌 
https://www.npmjs.com/package/give-me-a-joke

터미널에서 npm install
skeh0@pyun MINGW64 ~/OneDrive/바탕 화면/WebDev/practice/practice/NodeJSPractice/Jokester (main)
$ npm install give-me-a-joke

이후 해당 경로에 node_modules 디렉토리와 package.json 등의 디렉토리가 생성됨

index.js를 디렉토리에 생성하여 작성
const jokes = require('give-me-a-joke'); // 패키지 명을 입력

// console.dir(jokes)

// To get a random dad joke
jokes.getRandomDadJoke(function (joke) {
    console.log(joke);
});

node로 실행
skeh0@pyun MINGW64 ~/OneDrive/바탕 화면/WebDev/practice/practice/NodeJSPractice/Jokester (main)
$ node index.js
What do you call your friend who stands in a hole? Phil.



colors.js
https://www.npmjs.com/package/colors

npm install ( 만약 npm fund로 설치가 안될시 아래에 --no-fund까지 install)
skeh0@pyun MINGW64 ~/OneDrive/바탕 화면/WebDev/practice/practice/NodeJSPractice/Jokester (main)
$ npm install colors

up to date, audited 52 packages in 591ms

3 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities

skeh0@pyun MINGW64 ~/OneDrive/바탕 화면/WebDev/practice/practice/NodeJSPractice/Jokester (main)
$ npm install --no-fund

up to date, audited 52 packages in 5s

found 0 vulnerabilities


node 실행
skeh0@pyun MINGW64 ~/OneDrive/바탕 화면/WebDev/practice/practice/NodeJSPractice/Jokester (main)
$ node index.js
Did you hear the one about the giant pickle?  He was kind of a big dill. // 터미널에서는 무지개색으로 보임


npm 전역 node_modules에 설치
글로벌이 아닌 모듈을 npm install 했을 경우 다른 디렉토리에서 require()를 하여 불러올 경우 불러오지 못하는 에러가 발생
따라서 여러 디렉토리에서 불러오려면 전역으로 install 해야한다.
하지만 express나 react 등과 같은 곳에서 전역으로 쓰게 되면 버전마다 차이가 나기 때문에 전역으로 설치하지 않는 것이 좋다.

cowsay 설치하기
https://www.npmjs.com/package/cowsay

npm install -g cowsay 로 설치
-g 는 global(전역)을 의미

만약 최상위 node_modules디렉토리에 추가하고 싶은경우
sudo chown -R $USER/usr/local/lib/node_modules
입력

터미널에 cowsay helooo 입력
skeh0@pyun MINGW64 ~
$ cowsay helooo
 ________
< helooo >
 --------
        \   ^__^
         \  (oo)\_______
            (__)\       )\/\
                ||----w |
                ||     ||

취한모드(-s : stoned)
skeh0@pyun MINGW64 ~
$ cowsay hellooooo -s
 ___________
< hellooooo >
 -----------
        \   ^__^
         \  (**)\_______
            (__)\       )\/\
             U  ||----w |
                ||     ||

자세한건 --help로 확인

단, 최상위 디렉토리가 아니라 특정 디렉토리에서 cowsay를 require() 할 경우 에러가 발생함
이때 npm link cowsay를 터미널에서 실행 후 다시 node를 실행하면 정상적으로 작동




package.json 
npm으로 install 한 패키지를 보면 package.json 파일이 자동으로 생성되어 있음
이 파일은 기본적으로 이 특정 프로젝트나 패키지, 앱에 대한 데이터 즉 정보를 지니고 있음

Artster라는 디렉토리를 생성
mkdir Artster
cd Artster

npm init을 하면 pakcage.json이 만들어짐

skeh0@pyun MINGW64 ~/OneDrive/바탕 화면/WebDev/practice/practice/NodeJSPractice/artster (main)
$ npm init
This utility will walk you through creating a package.json file.
It only covers the most common items, and tries to guess sensible defaults.

See `npm help init` for definitive documentation on these fields
and exactly what they do.

Use `npm install <pkg>` afterwards to install a package and
save it as a dependency in the package.json file.

Press ^C at any time to quit.
package name: (artster)
version: (1.0.0)
description:
entry point: (index.js)
test command:
git repository:
keywords:
author: Pyun
license: (ISC)
About to write to C:\Users\skeh0\OneDrive\바탕 화면\WebDev\practice\practice\NodeJSPractice\artster\package.json:

{
  "name": "artster",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "Pyun",
  "license": "ISC"
}


Is this OK? (yes)


이후 해당 디렉토리에 가면 package.json 파일이 생성되어 있음

skeh0@pyun MINGW64 ~/OneDrive/바탕 화면/WebDev/practice/practice/NodeJSPractice/artster (main)
$ ls
package.json

figlet 설치
https://www.npmjs.com/package/figlet 참고

skeh0@pyun MINGW64 ~/OneDrive/바탕 화면/WebDev/practice/practice/NodeJSPractice/artster (main)
$ npm i figlet

added 1 package, and audited 2 packages in 1s

found 0 vulnerabilities

artster/package.json을 보면 figlet 버전과 입력되어 있음
{
  "name": "artster",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "Pyun",
  "license": "ISC",
  "dependencies": {
    "figlet": "^1.5.2"
  }
}

해당 디렉토리안에 index.js파일을 만들고 작성
const figlet = require('figlet')

figlet('Hello World!!', function (err, data) {
    if (err) {
        console.log('Something went wrong...');
        console.dir(err);
        return;
    }
    console.log(data)
});

node 실행
skeh0@pyun MINGW64 ~/OneDrive/바탕 화면/WebDev/practice/practice/NodeJSPractice/artster (main)
$ node index.js
  _   _      _ _        __        __         _     _ _ _
 | | | | ___| | | ___   \ \      / /__  _ __| | __| | | |
 | |_| |/ _ \ | |/ _ \   \ \ /\ / / _ \| '__| |/ _` | | |
 |  _  |  __/ | | (_) |   \ V  V / (_) | |  | | (_| |_|_|
 |_| |_|\___|_|_|\___/     \_/\_/ \___/|_|  |_|\__,_(_|_)

// Hello World!! 그림임...

colors랑 결합
npm i colors를 한 다음 package.json에 dependency확인

index.js에 colors를 불러와서 입력
const figlet = require('figlet');
const colors = require('colors');

figlet('Hello World!!', function (err, data) {
    if (err) {
        console.log('Something went wrong...');
        console.dir(err);
        return;
    }
    console.log(data.green)
});

skeh0@pyun MINGW64 ~/OneDrive/바탕 화면/WebDev/practice/practice/NodeJSPractice/artster (main)
$ node index.js
  _   _      _ _        __        __         _     _ _ _
 | | | | ___| | | ___   \ \      / /__  _ __| | __| | | |
 | |_| |/ _ \ | |/ _ \   \ \ /\ / / _ \| '__| |/ _` | | |
 |  _  |  __/ | | (_) |   \ V  V / (_) | |  | | (_| |_|_|
 |_| |_|\___|_|_|\___/     \_/\_/ \___/|_|  |_|\__,_(_|_)



이렇게 dependency를 작성하면 github에 프로젝트를 push 할 경우 node_modules는 push되지 않음
이 때 터미널에서 npm install 혹은 npm i 를 하면 npm이 package.json에 dependency를 찾아서 알아서 install해줌

따라서 프로젝트의 루트 디렉토리 안 package.json이 있는 곳에 코드를 내려받고 npm install을 함


언어맞추기 프로젝트

franc 패키지
https://github.com/wooorm/franc

langs 패키지
https://github.com/adlawson/nodejs-langs


빈 디렉토리를 생성하여 package.json을 만든 후 franc와 langs 설치
skeh0@pyun MINGW64 ~/OneDrive/바탕 화면/WebDev/practice/practice/NodeJSPractice/artster (main)
$ cd ..

skeh0@pyun MINGW64 ~/OneDrive/바탕 화면/WebDev/practice/practice/NodeJSPractice (main)
$ mkdir LangGuessr

skeh0@pyun MINGW64 ~/OneDrive/바탕 화면/WebDev/practice/practice/NodeJSPractice (main)
$ cd langGuessr

skeh0@pyun MINGW64 ~/OneDrive/바탕 화면/WebDev/practice/practice/NodeJSPractice/langGuessr (main)
$ ls

skeh0@pyun MINGW64 ~/OneDrive/바탕 화면/WebDev/practice/practice/NodeJSPractice/langGuessr (main)
$ npm init
This utility will walk you through creating a package.json file.
It only covers the most common items, and tries to guess sensible defaults.

See `npm help init` for definitive documentation on these fields
and exactly what they do.

Use `npm install <pkg>` afterwards to install a package and
save it as a dependency in the package.json file.

Press ^C at any time to quit.
package name: (langguessr)
version: (1.0.0)
description:
entry point: (index.js)
test command:
git repository:
keywords:
author:
license: (ISC)
About to write to C:\Users\skeh0\OneDrive\바탕 화면\WebDev\practice\practice\NodeJSPractice\langGuessr\package.json:

{
  "name": "langguessr",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC"
}


Is this OK? (yes)

skeh0@pyun MINGW64 ~/OneDrive/바탕 화면/WebDev/practice/practice/NodeJSPractice/langGuessr (main)
$ npm i franc langs

added 5 packages, and audited 6 packages in 4s

4 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities

npm i colors


vscode 작성
const franc = require('franc');
const langs = require('langs');
const colors = require('colors');
const input = process.argv[2];
const langCode = franc(input);

if (langCode === 'und') {
    console.log("SORRY, couldn't figure it out ! try with more")
} else {
    const language = langs.where("3", langCode);
    console.log(`Our best guess is: ${language.name}`.green);
}


// 현재 에러 -> require대신 import로 바꾸고 package.json에 type="modules"를 추가
근데 왜 langs는 또 import가 아닌가...




