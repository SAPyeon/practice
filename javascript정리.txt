javascript
기본요소: 숫자(number), 문자열(string),불리언(boolean), null, undefined
--숫자: javascript에서는 하나의 타입만 존재, 양수,음수,정수,소수가 모두 포함//' %':모듈로,나머지를 구함 //'**'지수연산자//NaN:not a number//const:상수,숫자 증감 변경불가, 변하지 않는 값(원주율 등 수학계산식)을 지정할 때 사용 //var:변수,javascript에서는 자주 사용하지 않음//
불리언(boolean):true or false만 허용 
--문자열(string):""를 사용하여 문자로 표현,''사용 가능 일관성있게 사용 //.length:문자길이를 알려줌 //
--매서드(method): .toUpperCase() : 대문자로 변경 //.toLowerCase():소문자 //.Trim: 공백제거,문자만 보존,문자열의 핵심을 뽑을 때 유용 // 매서드는 연달아 사용 가능 //.indexof('문자'):문자가 어느자리에 포함되어 있는지// .slice(beginIndex[,endIndex]):문장의 시작부분과 끝부분을 지정하여 추출,음수로 설정시 뒤에서부터 설정// .replace(처음단어,바꿀단어)//.repeat(반복할 횟수)//
--템플릿 리터럴: 백틱(`)사이에 ${}를 넣고 띄어쓰기를 하면 한 문장으로 만들 수 있음
--undefined:정의가 되지 않음, 요구하는 값을 모를 때
--null:값이 아예 존재하지 않을 때
--Math: .floor():내림// .round():반올림 // .ceil():올림//.random():0과 1사이의 임의의 숫자를 생성//pow(인수,제곱근):인수에 몇 제곱근으로 표시 //
--비교연산자: >, < , >=, <=, 유니코드(문자간에도 값이 있음, 각 언어마자 유니코드가 있음) // == 두 값이 같은지 봄, 타입을 구분하지 않음,예를들어 12=='12' 는 true로 나옴,따라서 다른 타입을 적용해도 예상못한 결과가 나올 수 있음 // ===는 타입이 같아지지 않음 따라서 예시는 false로 결과가 나옴, 값을 적용할 때 삼중등호를 씀 //!=는 ==부정 !==는 ===부정
--console.log() : 다른언어의 print()와 같음. ex) console.warn("UH OH WARNING!")
--alrt("HI THERE") :웹에서 알림
--prompt("please enter a number") : 데이터를 넣을 수 있는 창
--parseInt(함수) : 문자열을 정수로 바꿔 출력,문자열 대신 숫자를 추출
--arguments : 유사배열이라고 불림, // arguments[index]로 특정 자릿수를 알 수 있고 length, callee(실행중인함수의참조값)을 사용할 수 있는게 배열과 비슷//arguments객체는 배열과 달리 forEach,sort,filter,map 사용 불가


--If 구문
if(rating===3){
  console.log("you are a superstar!");
}                                                                     ----만약 조건문이 거짓일 경우 이 부분만 출력이 안됨

else if(rating===2){
   console.log("oh you are megastar!");
}                                                                     ---- if문이 거짓인 경우 else if 문으로 내려와서 실행, else if문이 실행되려면 위의 조건문들이 모두 거짓이 되어야 함

ex)
//0-5 -FREE
//5-10 CHILD $10
//10-65 ADULT $20
//65+ SENIOR $10

const age = 8;

if (age <5) {
  console.log("You are a baby. You get in for free!");
} else if (age<10){
  console.log("You are a child. You pay $10");
} else if (age<65){
  console.log("You are an adult. You pay $20");
} else {
  consol.log("You are a senior. You pay $10");
}

Else문
마지막까지 참이 없으면 실행됨(조건문이 없음)

if(조건문){출력}
else {출력}
                                      ------------조건에 맞으면 if 부분을 출력하고 아니면 else부분을 출력함(양자택일),한번에 처리하고 싶을 때 사용



조건부 네스팅(Nesting)

const password = prompt("please enter a new password");
//password must be 6+ characters
if (password.length>=6){
  console.log("LONG ENOUGH PASSSWORD!")
} else {
  console.log("PASSWORD TOO SHORT! Must be 6+ characters!")
}

//password cannot include space
if (password.indexOf(' ') ===-1){
  console.log("Good job! No space!")
} else{
  console.log("Password cannot contain spaces!")
}                                                                       --------.indexOf(' ') : 괄호안에 띄어쓰기가 없으면 음수가 나옴// 문자에서 첫번째로 나타나는 위치를 리턴함.// .indexOf(찬을 문자열, 찾기 시작할 위치)
 

const password = prompt("please enter a new password");
//password must be 6+ characters
if (password.length>=6){
  if (password.indexOf(' ') ===-1){
  console.log("Valid Password!")
} else{
  console.log("Password cannot contain spaces!")
}
} else {
  console.log("PASSWORD TOO SHORT! Must be 6+ characters!")
}



truthyness falsyness
javascript 모든 값은 truthy 와 falsy 값이 있음
Falsy 값인 경우 : false, 0 , ""(empty string), null , undefiend, NaN
나머지는 truthy임



논리연산자
&& : and 연산자
|| :or 연산자
 ! : not연산자, !true = false

and연산자가 or연산자보다 우선순위를 가지고 있음, 혹은 ()를 사용하여 우선순위를 설정


const password = prompt("please enter a new password");
//password must be 6+ characters
if (password.length>=6 && password.indexOf(' ') ===-1){
  console.log("Valid Password!")
} else{
  console.log("Incorrect format for password!")      
}                                                                                           -------------둘 다 참이어야 출력

let firstName = prompt("enter your first name");
if(!firstName){
  firstNamme = prompt("TRY AGAIN!!");
}


switch조건문
const day = 2;
switch(day){
  case 1:
        console.log("Monday")
        break;
  case 2:
        console.log("Tuesday")
        break;
  case 3:
        console.log("Wednesday")
        break;
  case 4:
        console.log("Thuresday")
        break;
  case 5:
        console.log("Friday")
        break;
  case 6:
        
  case 7:
        console.log("Weekend")
        break;                                                         -----------아래로 해석하다 break에서 멈춤, 따라서 6을 입력시 case7의 break에 따라서 Weekend출력
  default:
        console.log("I dont know that!")                     ------------ if문 else와 같음
}




배열
배열의 값은 집합이다
배열의 값은 순서가 있는 집합이다.
let students = [];
let colors = ['red', 'orange' , 'yellow']; ----------------- 왼쪽에서부터 오른쪽으로 순서가 됨
let days = ['Monday', 'Tuesday', 'Wednesday'];
let kitchenSink = [true, undefined 12, NaN, false null 'HI';] -------배열이 종류가 달라도 상관없음(javascript만)
배열은 인덱스화 되어있음
index : 0,1,2,3,4,5,6순서로 됨

let colors = ["red","orange", "yellow"]; ----- 배열은 타입도 바꿀 수 있고 값도 바꿀 수 있음
colors[1]=70;
colors = ["red",70,"yellow"];
만약 colors[10]='indigo'를 넣었다면
colors = ["red",70,"yellow",empty x 7 , "indigo"] 가 되고
colors.length 는 11이 됨(모두 다 차 있는 건 아님,배열에 빈 공간이 생김,빈 곳은 undefined임)

Push 와 Pop 메서드
Push- add to end  ----- 배열이 길거나 인덱스를 찾기 번거로운 경우 배열 맨 끝에 추가, 새로 업데이트 되어 저장됨

Pop - remove to end----- 배열의 맨 마지막 요소를 보여주고 제거됨.
ex) let barbell = []
barbell.push(45)
barbell.push(45)
barbell.push(25)
barbell.push(10)
barbell.push(2.5)
따라서 barbell = [45,45,25,10,2.5]
parbell.pop() 
->2.5
barbell = [45,45,25,10]

Shift 와 Unshift
Shift - remove from start

예제
movieLine = ["tom","nancy","pablo","oliver","eva"]
movieLine.shift() = >"tom"
movieLine=["nancy","pablo","oliver","eva"]

Unshift - add to start
movieLine.unshift('VIP')
movieLine = ["VIP","nancy","bablo","oliver","eva"]

Concat - 배열을 합침
let cats=['blue','kitty']
let dogs=['rusty', 'wyatt']
let comboParty=cats.concat(dogs)
cats = ['blue','kitty'] ------------- cats에 업데이트 되지 않음
comboParty = ['rusty','wyatt','blue','kitty']

.includes - 배열에 특정 값이 있는지 보는 것
cats.includes('blue') //// output : true;
cats.includes('Blue') //// output : false;

.indexOf() - 그 단어가 있는 곳에 배열 인덱스를 알려줌
comboParty.indexOf('rusty') // output :0
comboParty.indexOf('ASIDUAS') // output:-1 ----- 값이 없을 경우는 -1이 나옴

.reverse - 배열을 뒤집어 줌
comboParty.reverse()
-> ["kitty","blue","wyatt","resty"]

.slice - 배열의 일부를 복사
let colors = ['red','orange','yellow','green','blue','indigo','violet'];
colors.slice(3(시작점(제외)),마지막점(포함))
->['green','blue','indigo','violet']
음수는 마지막부터 가져옴

.splice ---- 삽입하거나 결합시킴
splice (시작점, 얼마나 지울것인지, 추가할 내용)
colors.splice(5,1) --->"indigo"
colors = ['red','orange','yellow','green','blue','violet'];
colors.splice(3,0,'yellow-green','forestgreen')
->colors = ['red','orange','yellow','yellow-green','forestgreen','green','blue','violet'];

sort - 배열을 줄이는 매서드 ----오름차순,내림차순, 배열의 특정 부분을 기준으로 정렬
let scores = [1,70,100,2500,9,-12,0,34]
scores.sort()
->[-12,0,1,100,2500,34,70,9] --- 아마 앞자리 숫자 기준으로 정렬했을 것, 사용할 때 주의 


참조 타입과 동일성 테스트 
배열에서 콘텐츠가 같다고 같은 배열이 아니다.
각자 메모리에서 다른 것을 참조하고 있기 때문이다
따라서 각자 뭘 참조하고 있는지 알고 있어야 함.

const+배열
const라도 배열추가 삭제,변경 가능 
but const를 새로 초기화 하는 것은 불가능

다차원 배열
const gameBoard=[
['X,'O','X'],
['O','null','X'],
['O','O','X']
] 
gameBoard[1][1]
--->null


객체 리터럴
키와 객체가 쌍들로 움직임 
Property = key + value
const 변수 = {
키(key):값(value,
키:값,
키:값
}                               ----------------해당 객체를 선언할 때{}사용, 이후에는 대괄호[]를 사용
키를 사용하여 데이터를 불러올 수 있음
const product = {name:"Gummy Bears", inStock:true, price:1.99, flavors:["grape","apple","cherry"]};

const person = {firstName:"Mike",lastName:"Jagger"}
person["lastName"] /////"Jagger" 만약 없는 경우 undefined
person.firstName ///// "Jagger"   -------선언된 변수를 사용할 경우 키로 쓰려면 [] 으로 만들어야함




const year = {1999:'GOOD',2020:'BAD'};
years ///{1999:'GOOD',2020:'BAD'}
years["1999"] //////"GOOD" 
years[1999] //////"GOOD"       ----------같은 값으로 나옴, 모든 키는 문자열로 바뀜

수정
years[1999] = 'NOT BAD'
years //// {1999:'NOT BAD',2020:'BAD'};

추가
years[2000] = 'GOOD'
years //// {1999:"NOT BAD",2020:"BAD",2000:"GOOD"};

배열+객체 네스트 구성하기
const comments = [
	{username:'Tammy',text:'lololol',votes:9}
	{username:'FishBoi',text:'glub glub',votes:12387}
]
glubglub 불러오기
comments[1].text


반복문(Loop)

For 루프
for(let i =1; i<=10;i++){
	console.log(i);

}
console.log(1);
console.log(2);
console.log(3);
console.log(4);
console.log(5);
console.log(6);
console.log(7);
console.log(8);
console.log(9);
console.log(10);

기본 구조
for(){
초기값
중단값
증감값
}


무한루프의 위험성 : 무한루프를 실행할 경우 자바스크립트의 메모리를 계속 사용하여 컴퓨터에 무리가 갈 수 있음
for (let i = 20; i>=0; i++){
   console.log
} ---- 를 실행할 경우 무한루프가 생김 , 다른 대책을 세워야 함, 예를들어 i--를 한다던가 조건식을 바꾸던가 해서 영원히 진행되지 않도록 방법을 찾아야 함

배열 루프
const animals = ['lions','tigers','bears'];
for (let i =0; i<animals.length;i++){
   console.log(i,animals[i]);
}                                                          // 0  'lines' //1 'tigers' // 2 'bears'

네스트(중첩) 구성 루프
for ( let i =1;i,=10;i++){
	console.log(`i is: ${i}`)
	for (let j=1;j<=4;j++){
		console.log(`	j is : ${j}`)
	}
}
						
//i is: 1
	j is : 1
	j is : 2
	j is : 3
//i is 2    
	j is : 1
	j is : 2
	j is : 3                                                                          
....


while 루프
let count =0;
while (count<10){
	count++;
	console.log(count)	
}                                                  // 1 2 3 4 5 6 7 8 9 10

while은 반복 횟수가 정해져 있지 않은 경우 for문보다 유리
 
ex)
const SECRET = "BABYHippo";

let guess = prompt("enter the secret code...");
while(guess !== SECRET){
	guess = prompt("enter the secret code...");
}
console.log("CONGRATS YOU GOT THE SECRET!")


정지/break 키워드
let input = prompt("Hey, say something!")
while(true){
	input = prompt(input);
	if(input.toLowerCase() === "stop copying me") break;
}
console.log("OK YOU WIN!")

for (let i = 0 ; i<1000; i++){
	console.log(i);
	if(i===100)break;
}


추측게임 만들기

let maximum=parseInt(prompt("Enter the maximum number!"));
while(!maximum){
	maximum=parseInt(prompt("Enter a valid number!"));
}                                                                                     -----숫자를 넣지 않았을 경우 숫자를 넣게 유도// parseInt(): 문자열의 수를 정수로 반환

const targetNum = Math.floor(Math.random()*maximum)+1;           ----- Math.floor : 버림// Math.random(): 0~1사이 랜덤 숫자추출// 


let guess = parseInt(prompt("Enter your first guess!"));                  
let attempts = 1;

while (parseInt(guess) !== targetNum){
	if (guess === 'q')break;
	attempts++
	if(guess>targetNum){
		guess = prompt("Too high! Enter a new guess:");
	}else {
		guess = prompt("Too low! Enter a new guess:");
	}
}
if(guess === 'q'){
	console.log("OK, YOU QUIT")
}else{
	console.log("CONGRATS YOU WIN!")
	console.log(`You got it! It took you ${attempts} guess`);
}


for...of문
인터넷 익스프로어에 사용불가
const subreddits = ['cringe','books','chickens','funny','pics','soccer'];

for(let i = 0; i<subreddits.length;i++){
	console.log(`Visit reddit.com/r/${subreddits[i]}`)
} 
for...of 사용
for(let subreddit of subreddits ){
	console.log(`Visit reddit.com/r/${subreddit}`)
}

for of 다른 사용법 --- 배열이 아닌 다른 문자를 반복
for (let cha of "hello world"){
	console.log(char)
} 
//h//e//l//l//o// //w//o//r//l//d 


객체루프
객체리터럴은 반복할 수 없음
for in 루프가 있지만 잘 사용하지 않음
객체리터럴에서 키를 가져오는 법 : Object.key(프로퍼티이름) // 값 가져오기 : Object.value(프로퍼티이름);

할 일 목록 (to do list)프로젝트
1.해야할 일을 적을 수 있는 프롬프트가 나오고
2.사용자가 뭘 입력하든 간에 그 입력 값의 결과가 quit과 일치하지 않을 때까지 입력이 가능
3.quit을 입력하면 종료 --먼저 만들기
4.delete를 입력시 특정 todo부분 삭제---splice메서드사용,배열사용, 
5.list사용시 모든 todo리스트가 보여짐


let input =  prompt("what would you like to do?");
const todos=['Collect Chicken Eggs', 'Clean Litter Box']
while(input !=='quit'&& input !=='q'){
	if(input === 'list'){
		console.log('***********************')
		for(let i = 0; i<todos.length; i++){
			console.log(`${i}: ${todos[i]}`);
		}
		console.log('***********************')
	}else if (input==='new'){
		const newTodo=prompt('Ok,what is the new todo?');
		todos.push(newTodo);
		console.log(`${newTodo} added to the list!`)
	}else if (input==='delete'){
		const index = parseInt(prompt('Ok,enter an index to delete:'));
		if(!Number.isNaN(index)){
			const deleted = todos.splice(index, 1);
			console.log(`Ok,deleted ${deleted[0]}`)
		}else{
			console.log('Unknown index')
		}
	}
	input=prompt("what would you like to do?")
	todos.push(input);
}	
console.log("OK, QUIT THE APP!")






함수
배열,조건,변수 어디에서도 사용가능
코드의 중복을 줄이는데 유용하고 해석하기 쉽게 만듬
인수(arguments): 함수에 입력하는 입력값들, 인수의 값을 입력하면 그 값이 매개변수(parameter)로 들어가서 함수를 출력
function greet(firstName){
	console.log(`firstName is: ${firstName}`)
}
매개변수는 식별의미가 없음, 임의의 글자를 넣어도 상관없음
인수가 여러개인 함수
function greet(firstName,lastName){
	console.log(`Hey there, ${firstName} ${lastName[0]}.`)
}

function repeat(str,numTimes){
	let result = '';
	for(let i =0; i<numTimes.length;i++){
		result +=str;
	}
	console.log(result);
}
repeat('hi',3) -----순서 중요 , 두번째 인수를 넣지 않아도 됨 (undefined로 불러 오류가 나는 경우 제외)

//hihihi

반환키워드 : 함수의 값을 저장하고 보관하기 위해 필요, return이후문장은 실행이 되지 않음(리턴이 함수실행을 중단시킴)//return은 하나의 값만 반환시킴, 
function add (x,y){
	if (typeof x !== 'number' || typeof y!== 'number'){
		return false;
	}
	let sum = x+y;
	return sum;                                                        --------sum과 false 둘 장 하나만 출력
}

add(9,4) //13
add(9,'a') //false
add(6,9) //15



함수의 범위
함수 안에 정의한 변수는 함수 안에서만 적용할 수 있음
함수 안에 출력을 할 경우 함수를 출력하면 그 값이 나온다, 그러나 출력을 하지 않은 경우 함수를 출력하면 에러가 발생함
var를 사용하면 변수의 범우가 함수로 지정되지만 블록으로 지정되지 않는다.(let을 쓸 경우 변수가 함수 안에서 블록됨)
함수 안에서만 정의된 함수는 유효범위가 함수범위임
블록 범위: 변수가 블록 안에서만 선언되면 유효범위가 블록안에서만 존재, 블록이란 함수는 아니지만 조건문이나 반복문과 같은것들이다.
렉시컬 범위: 함수는 계속 중첩될 수 있다. 렉시컬 범위란 부모 함수 안에 중첩된 내부 함수는 해당 외부 함수의 범위에나 또는 범위 내 정의된 변수에 엑세스 할 수 있다.

함수표현식
함수를 변수 정의에 포함시키는 것, 이름이 없는 함수를 정의함
const add = function(x,y){
	return x+y;
}

고차함수(Higher Order Function)
고차함수란 다른 함수와 함께 작동하거나 다른 함수에서 작동하는 함수
다른 함수를 인수로 받아 작업하거나 함수를 반환할 수 있는 함수
function callTwice(func){
	func();
	func();
}
function roollDid(){
	const roll=Math.floor(Math.random()*6)+1
	console.log(roll);
}
 
callTwice(rollDie)            ----- rollDie()로 쓰지 않음, rollDie로 써야 함수를 인수로 받아들임

반환함수(Return function)
function makeMysteryFunc(){
	const rand = Math.random();
	if(rand>0.5){
		return funciton(){
			console.log("CONGRATS, I AM A GOOD FUNCTION!")
			console.log("YOU WIN A MILLION DOLLARS!!")
		}
	}else{
		return function(){
			alert("YOU HAVE BEEN INFECTED BY A COMPUTER VIRUS! ")
			alert("STOP TRYING TO CLOSE THIS WINDOW ")
			alert("STOP TRYING TO CLOSE THIS WINDOW ")
			alert("STOP TRYING TO CLOSE THIS WINDOW ")
			alert("STOP TRYING TO CLOSE THIS WINDOW ")
		}
	}
}
-반환 값으로 함수를 사용

함수를 실행하기 위해서 또다른 변수를 설정
const mystery =  makeMysteryFunc()
이제 mystery를 실행하면 함수가 출력됨

Betweenfunction 만들기 숫자가 1에서 10사이값이거나 , 50에서 100사이 값이면 반환
function isBetween(num){ 
	return num>=50 && num<=100	
}

function isBetween2(num){ 
	return num>=1 && num<=10	
}

isBetween(80) // true
isBetween2(80) // false


팩토리 함수 : 함수를 만들어 주는 함수
function makdBetweenFunc(min,max){
	return funciton(num){
		return num>=min && num<=max;
	}
}

const isChild = makeBetweenFunc(0.18) // return함수의 min max값에 0,18이 들어감
isChild // (num){return num>=min && num<=max;} ---- return 안의 함수를 반환
isChild(40)// false --- num값에 40을 입력, min max값에 이미 0과 18이 들어가있음
isChild(7) // true

const isAdult = makeBetweenFunc(19,64)
const isSenior = makeBetweenFunc(65,120) // 둘 다 makeBetweenFunc 함수의 min max값을 정의함
isAdult(50)//true
isAdult(90)//false
isSenior(40)//flase
isSenior(70)//true

메서드 만들기
메서드는 객체에 종속된 특성으로 함수에 포함되는 개념이다.
즉, 메서드는 객체에 속성(프로퍼티)으로 추가된 함수이다.
따라서 모든 메서드는 함수이지만 모든 함수가 메서드인 것은 아니다.

myMath메서드 만들기

const myMath = {
	PI:3.14159,
	square:function(num){
		return num*num;
	},
	cube:function(num){
		return num**3;
	}
}
myMath //{PI:3.14159, square:f, cube:f}
myMath.PI //3.14159
myMath.square(2) //4
myMath.cube(2) //8

속기법으로 메서드를 만들기 -- function 선언 삭제
const myMath = {
	PI:3.14159,
	square(num){
		return num*num;
	},
	cube(num){
		return num**3;
	}
}
결과는 동일


this 키워드
let,var,return과 같이 this도 키워드임
메서드에 있는 객체를 가리킬 때 사용 but 항상 그런것은 아님
왜냐하면 호출된 함수 문맥(맥락)에 따라 바뀔 수 있기 때문이다. ---함수 호출에 따라 다름




const cat = {
	name:'Blue Steele',
	color:'grey',
	breed:'scottish fold',
	meow(){
		console.log(`${this.name} says MEOWWWW`);
	}


}


cat.meow() // Blue Steele says MEOWWWW


const meow2 = cat.meow;
meow2() // says MEOWWWW // this부분 사라짐. meow2와 cat.meow는 같은 방식이지만 호출방식이 다르기 때문에 다르게 나타남, this 방식이 cat메서드가 아닌 window메서드에서 this를 찾으려고 함
this의 기본값은 window임



try/catch문
오류를 잡아서 자바스크립트의진행을 원활하게 함

function yell(msg){
	try{
	console.log(msg.toUpperCase().repeat(3));
	}catch(e){
		console.log(e);
		console.log("Please pass a string next time!")
	}
}
만약 msg에 숫자를 입력하는 경우 메서드가 실행이 되지 않아 오류가난다.
그때 try와 catch문을 사용하면 오류보다 밑에 있는 다른 실행문들의 실행을 방해하지 않는다.
비동기 함수를 사용할 때 쓰게 됨


forEach()메서드
요소별로 출력을 실행할 때 사용,배열안에 하나씩 적용시킬 때 사용, for of를 사용하면서 자주 사용하지 않음
ex)
const numbers = [1,2,3,4,5,6,7,8,9,10]

funciton print(element){
	console.log(element)
}

numbers.forEach(print)//1//2//3//4//5//6//7//8//9//10


=>일반적으로 사용하는 방식 : forEach문에 함수를 작성
numbers.forEach(function (el){
	console.log(el)
})
결과는 동일


Map메서드
배열의 모든요소에 함수를 적용시켜 새로운 복제 배열에 집어 넣을 때 사용
그러나 콜백을 사용할 경우 요소마다 콜백을 실행하고 반환값을 받게 됨. 
맵 안 함수의 매개변수에 기존 배열을 불러와서 사용

const score = [
	{name:'Kim', KO:100, Eng:80},
	{name:'Lee', KO:60, Eng:70},
	{name:'Song', KO:80, Eng:65},
	{name:'Park', KO:95, Eng:90},

]

const Koreanscore = score.map(function(Korean){
	return console.log(`${Korean.name}'s Korean score is ${Korean.KO}`) 
})


//Kim's Korean score is 100
//Lee's Korean score is 60
//Song's Korean score is 80
//Park's Korean score is 95


화살표 함수 적용
const Koreanscore = score.map((Korean)=>(
	console.log(`${Korean.name}'s Korean score is ${Korean.KO}`) 
))


화살표함수(arrow functions) --인터넷 익스플로러에서는 사용불가
함수표현식을 만드는데 도움을 줌

const add = function(x,y){
	return x+y;
}

const add = (x,y) =>{
	return x + y;
}


결과는 동일

const rollDie = () +>{
	return Math.floor(Math.random()*6) +1
}

매개변수가 하나일 때는 () 생략 가능, but 매개변수를 쓰지 않거나 두개 이상일 경우 ()를 안쓰게 되면 오류가 남

const square = num =>{
	return num*num;
}

화살표 함수에 {}대신 ()을 사용할 경우 return없이도 자동적으로 반환(반환한다고 암시)
코드를 짧게 만들 때 유리
표현식이 하나만 있을 때, 반환값이 유일할 때 사용해야 함 

const rollDie = () =>(
	Math.floor(Math.random()*6) +1
)


const add = (a,b) => a+b // 한 줄로 만들 수 있음





setTimeout:시간딜레이를 두고 출력
콜백함수와 사용
비동기javascript에서 사용
setTimeout(()=>{
	console.log("HELLO!!!!");
},3000)

//3초 뒤 HELLO!!!! 반환
console.log("HELLO!!!!..."); //첫번째
setTimeout(()=>{
	console.log("...are you still there?");//3초 뒤 세번째(마지막)으로 반환
},3000)
console.log("GOODBYE!!")//두번째


setInterval:간격을 두고 출력
여러간격으로 여러번 출력할 수 있음
const id = setInterval(()=>{
	console.log(Math.random())	
},2000); //2초 간격을 두고 출력


멈추는법
clearInterval(id) //인터벌을 멈춤


Filter메서드
요소가 참이되면 반환
원본은 변하지 않음
const numbers = [1,2,3,4,5,6,7,8,9,10]
numbers.filter(n=>{
	return n<5;
})

//(4) [1,2,3,4]


const scores = [
	{name:'Kim', KO:100, Eng:80},
	{name:'Lee', KO:60, Eng:70},
	{name:'Song', KO:80, Eng:65},
	{name:'Park', KO:95, Eng:90},
	{name:'Ra', KO:55, Eng:40},
	{name:'Shin', KO:45, Eng:80},
	{name:'Kang', KO:95, Eng:100},

]

const goodKOscore = scores.filter(K=>K.KO>90)
//
0:{name:'Kim', KO:100, Eng:80}
1:{name:'Park', KO:95, Eng:90}
2:{name:'Kang', KO:95, Eng:100}
length:3

const Koreanscores = scores.map(K=>K.KO); //[100, 60, 80, 95, 55, 45, 95 ]
console.log(Koreanscores[2]); //80


filter, map 함께 사용
const goodKOscore = scores.filter(K=>K.KO>90)
//0: {name: 'Kim', KO: 100, Eng: 80}
//1: {name: 'Park', KO: 95, Eng: 90}
//2: {name: 'Kang', KO: 95, Eng: 100}
//length: 3

const goodstudents = goodKOscore.map(K=>K.name)
//['Kim','Park','Kang'];

const goodKOstudents = scores.filter(K=>K.KO>90).map(K=>K.name)
//["Kim", "Park", "Kang"]



every some 메서드 : 둘다 불리언 메서드라서 true false로 나타남

every
각각의 모든 요소가 해당 콜백에 참을 반환하는지를 나타냄

ex)
const exams  = [90,48,33,80,68,90,87,79,70,95]

exams.every(score => score >=75)// false , 하나라도 조건에 만족하지 않으면 false반환


some
최소 하나 이상이 참을 반환하는지를 봄

exams.some(score => score >=75)// true

scores.some(K=>K.KO>90) // true


reduce 메서드
배열을 점점 줄여나가다가 마지막에 하나만 남게하는 것, 또는 비교를 하거나 더하고 곱하기를 통해 작동됨
ex)합계 reduce
[3,5,7,9,11].reduce((accumulator,currentValue)=>{
return accumulator + currentValue;
});

accumulator 누적 값
currnetValue 현재값
return값은 나중에 다시 accumulator값으로 들어감
그 후로 다시 currentValue값과 함께 return에 들어감
따라서 초기 accumulator은 3 // currentValue는 5 //return은 8
다시 accumulator은 8 //currentValue는 7 // return은 15
..... 결국 return value는 35까지 순회함


ex)const prices = [9.99, 1.50, 19.99, 49.99 , 30.50];
const total = prices.reduce((total,price)=>{
	return total+price
})
///111.97

최저가격찾기
const minPrice = prices.reduce((min,price)=>{
	if(price<min){
		return price;
	}
	return min
}) //1.5

accumulator 초기값 설정하기
const evens = [2,4,6,8];
evens.reduce((sum,num)=>sum+num,100)//120 // 여기서 40으로 입력하면 값이 40부터 시작해서 60으로 나옴

//reduce메서드사용
const number = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
const sum = number.reduce((a,b)=>a+b); //55
//최소값 구하기
const minnum = number.reduce((min,num)=>{
	if(min<num){
		return min
	}return num
});//1
//최대값 구하기
const maxnum = number.reduce((max,num)=>{
	if(max<num){
		return num
	}return max
});//10

화살표 함수를 사용할 때 쓰는 this 
일반적 함수의 경우 객체안에 this를 사용하면 그 함수를 가르킴
but 화살표 함수로 this를 호출하면 window객체에서 찾음

또한 일반적 함수식으로 윈도우 객체 안에 콜백으로 this를 사용하면 window객체에서 출력
but 화살표함수로 사용하면 함수가 만든 범위에서 상속되는 this키워드 값과 같아짐
ex)
const person={
	firstName:'Viggo',
	lastName:'Mortensen',
	fullName: function(){                                           
		return `${this.firstName} ${this.lastName}`  //일반 함수식으로 person함수 안의 객체를 불러옴
	},
	shoutName: function(){
		setTimeout(()=>{                               //setTimeout이라는 윈도우 객체 안이라 일반 함수식을 쓰면 윈도우 객체에서 불러옴 
			console.log(this);                     //따라서 화살표 함수를 써서 person함수안의 객체를 불러옴
			console.log(this.fullName())
		},3000)
	}
}


자바스크립트 새로운 기능들

디폴트 매개변수(default params)
function multiply(a,b=1){}
매개변수 = 값 을 넣어서 초기값을 바로 설정할 수 있다.
단, 순서가 중요해서 디폴트 값이 없는 매개변수를 먼저 설정해야한다
function greet(b,a="hi"){
	console.log(a,b); 
}
greet('aa') // hi aa

함수호출시 전개구문(spread)
배열 또는 반복가능한 부분을 확장시킴
함수(...배열이름) 
배열의 인수들을 각각의 인수로 바꿔서 사용함 ex)[1,2,3]을 1 2 3 으로 출력
ex)문자열에도 사용가능
console.log('hello') //hello
console.log(...'hello')// h /e /l /l /o // 문자열 한 덩어리가 문자 하나하나로 분리됨
console.log('h','e','l','l','o')//h /e /l /l /o // 같은의미



//spread문법
const arr1 = [{name:'aa', age:10, }, {name:'bb', age:12}];
const arr2 = [...arr1, {name:'cc', age:14}];

console.log(arr2);
//0: {name: 'aa', age: 10}
//1: {name: 'bb', age: 12}
//2: {name: 'cc', age: 14}
//length: 3


//rest문법(...arg)
argument(인수객체)를 사용할 경우 배열 메서드 (push,pop 등)을 사용할 수 없음, 또한 화살표함수 사용불가
따라서 배열로 사용할 수 있고 화살표함수를 사용할 수 있는 rest문법을 써야함
ex)
function sum(){
	console.log(arguments)
}

sum(33,65,77);
Arguments(3)
0:33
1:65
2:77
// 배열처럼 보이지만 배열메서드 사용불가
즉
function sum(){
	return arguments.reduce((total, el)=>total + el)
} // error 발생... 인수는 배열메서드를 사용 불가

rest사용
function sum(...nums){
	return nums.reduce((total, el)=>total + el)
}
sum(1,2,3,4) //10

function raceResults(gold, silver, ...everyoneElse){
	console.log(`GOLD MEDAL GOES TO: ${gold}`)
	console.log(`SILVER MEDAL GOES TO: ${silver}`)
	console.log(`AND THANKS TO EVERYONE ELSE: ${everyoneElse}`)

}

raceResults('Sun','Min', 'Solar', 'Todd')
//GOLD MEDAL GOES TO: Sun
SILVER MEDAL GOES TO: Min
AND THANKS TO EVERYONE ELSE: Solar, Todd


배열분해
const scores = [100, 99, 97, 95, 88, 85, 80, 77, 74, 68]

const highScore = scores[0]; //100
const secondScore = scores[1]; ..99

const [gold, silver, bronze, ...everyoneElse] = scores;

gold // 100 배열의 첫번째 값
silver // 99 배열의 두번째 값
bronze //97 배열의 세번째 값
everyoneElse // 배열 나머지

여기서 scores에 영향을 주지 않음
배열의 순서를 지켜야 함


객체분해
const user = {
	email: 'horlo@gmail.com',
	password: 'dlkfjdlkfj',
	firstName: 'MIMI',
	lastName: 'horlo',
	born: 1959,
	died: 1989
}

const {email, firstName, lastName, died} = user;

email //  "horlo@gmail.com"
firstName // "MIMI"
died // 1989

const {born : birthYear}= user;
born// error
birthYear // 1959

객체추가
const {city = Seoul} = user;

city // Seoul

그러나 객체에 있는 정보를 다시 새로 입력해도 기존에 있는 값이 나옴



DOM(Document Object Model) 
문서 객체 모델
html+css+javascript
chrome 에서 console에 cosole.dir(document)를 치면 javascript객체가 나옴(참고)
모든 객체가 모여 문서가 되는 것

DOM에서 요소를 찾아서 선택
document.getElementById('#id') 
document.getElementsByClassName('class')
document.querySelector('') : 아이디나 클래스,태그의 첫번째 있는 것을 불러옴 // id는 #, class는 . 으로 평소 css처럼 불러옴
document.querySelector('a[title="Java"]') : 앵커태그 타이틀로 불러옴(타입과 속성으로 불러옴)
document.querySelectorAll(''): 일치하는 모든 것을 불러옴

DOM조작
.innerText : 텍스트 값을 불러오고 바꿀 수 있음, 보이는 요소만 변경가능
.textContent : 그 요소의 안에 있는 모든 요소들을 불러옴(innerText는 요소 안 요소들을 불러오지 않음), ex) p 안에 b 같은 경우 innerContent는 불러오지만 innerText는 불러오지 않음
.innerHTML : html의 마크업까지 전체다 html에 입력, 콘텐츠를 업데이트 하거나 html을 변경할 때 사용, innerText는 태그를 무시하고 텍스트로 보지만 innerHTML은 태그자체를 입력하여 html에 적용

.id : id를 변경, 변경할 경우 기존css적용한 것을 다시 입력해야함
.src :소스변경
.href : javascript에 입력된 href을 가져옴
.title
.getAttribute : html자체에서 가져옴
.setAttribute('바꾸려는 값', '바꾼 값') : 속성을 변경할 때 사용
.type : input을 불러와서 type을 변경할 수 있음

스타일변경
자바스크립트에는 -를 사용x , font-size == fontSize
.style.color 로 css를 변경, but html에 인라인 스타일로 적용되는 거라 선호하지 않음
window.getComputeStyle().color : 기본 스타일을 불러올 수 있음

classList 
요소에 현재 클래스를 적용하는 방법
classList.add : 클래스 리스트에 추가
classList.toggle('purple') : 클래스리스트를 입력할 때 마다 껐다가 켜지면서 반복, 이 때는 보라색 글씨가 입력할 때마다 켜졌다 꺼졌다 함

.parentElement : 부모요소를 알고 싶을 때 사용, 콘솔창에 입력, 한 부모에 자식요소는 여럿이 있을 수 있지만 자식의 부모는 하나임

.children[index] : []없이 입력할 경우 모든 자식요소가 배열처럼 나타나고 []를 사용해서 순서대로 불러올 수 있음 

.nextElementSibling : 근접한 형제요소를 불러옴
.nextSibling : 근접한 형제 노드를 불러옴

const newH3 = document.createElement('h3') : html요소만들 수 있음, 여기서는 <h3></h3>를 만듬
newH3.innerText = 'I am new!'로 텍스트를 안에 넣고
document.body.appendChild(newH3) : 바디태그에 <h3>I an new!</h3>를 붙임


.append('hi','ho') : 맨 뒤에 텍스트를 추가하고 싶을 때 사용
.prepend() : 앞쪽에 텍스트를 추가하고 싶을 때 사용
.insertAdjacentElement('afterend',추가할 요소) : 추가하려는 곳 제일 끝부분에 추가, 추가하고 싶은 위치를 지정하여 사용

.removechild(): 요소에서 자식을 제거함, 부모를 찾아서 선택해서 사용한다는 번거로움이 있음
.remove() : 부모가 아니라 자기자신을 직접 제거하는데 사용



DOM 이벤트
onclick 이벤트 : document.querySeleoctor('h1').onclick = () => {
		alert('you clicked the h1')
	         }			
자바스크립트에서 onclick에 함수를 사용하여 적용, 함수를 사용안할 시 바로 적용이 되어버려서 동작하지 않음, 
따라서 함수를 거쳐서 할 수 있게 함수를 수단으로 이용해야 이벤트가 작동이 됨

addEventListener('click',function(){})
:'click'부분에는 원하는 이벤트 입력
콜백함수부분에서는 복수로 등록 가능


this
이벤트 핸들러 콜백함수 안 해당항목을 this가 참조함
콜백함수가 불려 나오게 만드는 트리거역할을 할 수 있음
이벤트 핸들러로 콜백함수를 반복적으로 입력하는 것보다 새로 함수를 만들어
this를 사용하는 것이 좀 더 효율적임
변수의 이름을 각각 직접 입력 안해도 해당 변수를 불러냄
ex)
h1.style.color = 'red';
this.styel.color='red'; == this가 가르키는 항목이 h1


이벤트 객체는 모든 이벤트 핸들러에 엑세스하고 자동으로 전달함
addEventListener('click',function(e){
	console.log(e); // e를 호출되면 이벤트에 관한 정보를 전달함
})


키보드이벤트
keydown : 키보드 키를 누를 때 발생
keyup : 키보드 키를 누른상태에서 떨어질 때 발생

어떤 위치의 자판이 눌려졌는지 보려면 code를 사용해야 함 ( not key)
위치 상관없이 어떤 단어를 입력할 경우 key사용

ex)화살표키만 출력하고 아닌건 무시
window.addEventListener('keydown',function(e){
	//console.log(e.code) : 키보드 코드값을 보여줌
	switch(e.code){
		case 'ArrowUp':
			console.log("UP!");
			break;
		case 'ArrowDown':
			console.log("DOWN!")
			break;
		case 'ArrowLeft':
			console.log("LEFT!")
			break;
		case 'ArrowRight':
			console.log("RIGHT!")
			break;
		default:
			console.log("IGNORED!")

	}

})




button.addeventListener('click',function(e){
	e.preventDefault();
})
폼의 버튼을 눌렀을 때 제출되지 않고 서버에 그대로 잔존하게 하는 것

document.querySelectorAll('input')[1].value

두번째 인풋의 텍스트 값

form아이디.elements.username.value에도 같은 값이 나옴;


change 이벤트는 오직 입력을 블러(blur)할 때만 발동함
즉, 다른 부분으로 이동하면 발동됨, 변경하고 떠날 때가 '변경'임


변경될 때마다 변화게 하려면 input이벤트를 사용
텍스트에 타이핑, 복사 붙여넣기만 해도 이벤트 발생

버블링 : 이벤트가 부모요소까지 영향을 주거나 다른 곳으로 영향을 줌
e.stopPropagation() : 버블링을 막을 수 있음

이벤트 위임 : 각 자식요소들의 부모 요소에 이벤트 수신기를 추가하는 것
부모요소에 이벤트를 입력하고 e.target을 불러옴
ex)
tweetsContainer.addEventListener('click',function(e){
	e.target.nodeName === 'LI' && e.target.remove();
})
해당 li를 클릭시 제거됨


비동기 자바스크립트

콜스택
여러 함수를 호출하는 스크립트에서 해당 위치를 추적함
함수 안에 함수가 있을 경우 안에 함수를 반환하고 사라지고 밖에 있는 함수를 실행
함수는 값이 반환되면 사라짐
밖의 함수를 호출하면 안의 함수를 호출하고 안의 함수가 값을 반환하면 사라지고 밖의 함수가 값을 반환하는 구조임
크롬에 source탭애서 디버거로 확인 가능, 

자바스크립트는 싱글 스레드이다
최대 한번의 한줄을 실행함
SetTimeout()함수를 사용하면 실행을 지연시킬 수도 있음
이 때, 자바스크립트는 지연된 코드를 실행시키는 것이 아니라 다음 코드를 실행시킴
지연된 부분은 브라우저에 넘기고 다음부분을 실행함
시간기록은 브라우저가 하는것임

콜백지옥
함수를 지연시킨 경우, 그 다음 함수를 지연시킨 함수 다음에 실행하기 위해서 중첩되게 함수를 작성하는 것,
혹은 아직 데이터베이스 작업하는 중이라 함수를 나중에 호출하고 싶을 때 함수를 중첩되게 써야 할 때가 있다.
이 수많은 중첩된 함수를 자바스크립트의 콜백지옥이라고 부른다.

콜백 실행 후 다음을 실행하기 위해 안에 또다시 콜백을 줌

콜백지옥을 해결하는 방법 : Promise사용
IE에는 적용불가
맨처음은 pending 성공은 resolved, 실패는 rejected
const fakeRequestPromise = (url) =>{
	return new Promise((resolve,reject) => {
		const delay = Math.floor(Math.random()*(4500))+500;
		setTimeout(() =>{
			if(delay>4000){
				reject('Connection Timeout : (')
			}else {
				resolve(`Here is your fake data from ${url}`)
			}
		},delay)
	})
}

fakeRequestPromise('yelp.com/page1');
.then(()=>{
	console.log("IT WORKED!!!!")
})
.catch(()=>{
	console.log("OH NO, ERROR!!!!")
})

promise에는 then을 사용하여 성공시 작동할 부분을 입력
이후 성공하면(resolved) IT WORKED!!!!를 출력하는 함수를 실행, 실패시 error메시지 함수를 실행(rejceted)

콜백처럼 중첩하여 사용
fakeRequestPromise('yelp.com/page1'); // url로딩 초에 따라 메세지 출력 
.then(()=>{
	console.log("IT WORKED!!!!(page1)")
	fakeRequestPromise('yelp.com/page2');
		.then(()=>{
			console.log("IT WORKED!!!!(page2)")
		})
		.catch(()=>{
			console.log("OH NO, ERROR!!!!(page2)")
		})
})
.catch(()=>{
	console.log("OH NO, ERROR!!!!(page1)")
})


첫번째 page1dl resolve가 되면 다시 또 page2부분으로 넘어감

중첩을 깔끔하게 정리되어 나열할 수 있음  : .then을 사용

fakeRequestPromise('yelp.com/page1');
	.then(()=>{
		console.log("IT WORKED!!!!(page1)")
		return fakeRequestPromise('yelp.com/page2');
	.then(()=>{
		console.log("IT WORKED!!!!(page2)")
		return fakeRequestPromise('yelp.com/page3');
		})
	.then(()=>{
		console.log("OH NO, ERROR!!!!(page3)")
		})
	})
	.catch(()=>{
		console.log("OH NO, A REQUEST FAILED!!!")
	})

위와 같지만 catch는 한번만 사용할 수 있어서 간단명료함

promise작성법
예시

const fakeRequest = (url) =>{
	return new Promise ((resolve,reject)=>{
		const rand = Math.random();
		setTimeout(()=>{
			if(rand<0.7){
				resolve('YOUR FAKE DATA HERE');
			}
			reject('Request Error!');
		},1000)
	})
}

fakeRequest('/dogs/1')
	.then(()=>{
		console.log("DONE WITH REQUEST!")
		console.log('data is:',data)
	})
	.catch((err)=>{
		console.log("OH NO!",err)
	})
	
const delayedColorChange = (color,delay)=>{
	return new Promise ((resolve, reject)=>{
		setTimeout(()=>{
			document.body.style.backgroundColor = color;
			resolve();
		},delay)
	})
}

delayedColorChange('red', 1000)
	.then(()=>{return delayedColorChange('orange',1000)})
	.then(()=>{return delayedColorChange('yellow',1000)})
	.then(()=>{return delayedColorChange('green',1000)})
	.then(()=>{return delayedColorChange('blue',1000)})
	.then(()=>{return delayedColorChange('indigo',1000)})
	.then(()=>{return delayedColorChange('violet',1000)})


비동기 함수 키워드
ASYNC FUNCTION  
async 키워드
함수 앞에 async를 입력하면 자동으로 Promise를 작동
const sing = async () =>{
	throw new Error("UH OH") // 오류값이 있으면 reject값으로 반환
	return 'LA LA LA LA"
}
sing()
	.then(()=>{
		console.log("PROMISE RESOLVE WITH :",data)
	})
	.catch(err => {
		console.log("OH NO, PROMISE REJECTED!")
		console.log(err)
	})


const login = async (username, password) => {
	if(!username || !password) throw 'Missing Credentials'
	if(password === 'corgifeetarecute') return 'Welcome!'
	throw 'invalid password'
}

login('asdfsfe','corgifeetarecute')
	.then(msg=>{
		console.log("LOGED IN!")
		console.log(msg)
	})
	.catch(err=>{
		console.log("ERROR!")
		console.log(err)
	})


await 키워드
비동기 코드를 쓰면서 동기처럼 보이게 함
비동기 코드를 쓸 때까지 대기하게 만듬
.then사용 없이 나열할 수 있음

async function rainbow(){
	await delayedColorChange('red',1000)
	console.log('HI!') // 위의 함수를 실행한 다음에 hi를 적용
	await delayedColorChange('orange',1000)
	await delayedColorChange('green',1000)
	return "ALL DONE!"		
}

rainbow().then(()=> console.log("END OF RAINBOW!"));

rainbow 함수가 다 끝난 다음 출력
.then 대신에 async 로 변경가능 

async function printRainbow(){
	await rainbow();
	console.log("END OF RAINBOW!");
}

promise가 reject가 될 때 처리 방법

const fakeRequest = (url) =>{
	return new Promise ((resolve,reject)=>{
		const rand = Math.random();
		setTimeout(()=>{
			if(rand<0.7){
				resolve('YOUR FAKE DATA HERE');
			}
			reject('Request Error!');
		},2000)
	})
}

async function makeTwoRequests(){
	try{
		let data1 = await fakeRequest('/page1');
		console.log(data1);
		let data2 = await fakeRequest('/page2');
		console.log(data2);
	}catch(e){
		console.log("CAUGHT AN ERROR",e)
		console.log("error is:",e)
	}
	
}


AJAX(ASYNCHRONOUS JAVASCRIPT AND XML)
요청에 따라 서버가 응답할 때 순수한 정보를 가져다가 가공함

API란 Application progrmming interface의 약자
컴퓨터가 여러 소프트웨어와 상호 작용하거나 소통하는 광범위한 인터페이스이다.
API를 주로 말할 때 WebAPI를 의미하는데 WebAPI는 HTTP를 기반으로 하는 인터페이스이다.

JSON : 컴퓨터가 이해할 수 있는 데이터 포맷, 데이터나 정보를 요청함
기존 xml은 정보 자체를 의미하기 때문에 html,css,javascript가 적용되지 않음
JSON (Java Script Object Notation)
{
 "키값" : 밸류 
}
로 이루어짐 꼭 ""로 처리

문자열이기 때문에 javascript에서 불러올 수 없음
단, JSON.parse(data)로 불러올 수 있음
JSON.Stringfy는 반대로 자바스크립트를 JSON으로 가져감

Postman 사용하기
api를 직접 만들기 전에 실험할 수 있음
다운로드해서 사용가능, 계정 생성을 하지 않아도 됨
상태코드도 확인 가능, 404코드는 보낸 코드를 알 수 없다는 것을 의미
200,201,202 코드가 정상으로 작동할 때 나오는 코드임
헤더는 키-값을 의미함

엔드포인트
/search/show?q=:query에서 :뒤에는 변수를 의미
?q=:query는 쿼리 문자열을 의미 요청할 때 추가 변수를 의미함
postman은 headers에서 키-값만 입력하여 url을 작성할 수 있음
accept  - application/JSON을 입력하면 쿼리가 아니라 헤더를 바꿀 수 있음

Fetch API
fetch('api url')
	.then(res => {
		console.log("RESPONSE, WAITING TO PARSE...",res)
		return res.json() // promise를 반환할 수 있음
	})
	.then(data => {
		console.log("DATA PARSED...",data)
		console.log(data.ticker.price)
	})
	.catch(e=>{
		console.log("OH NO! ERROR!",e)
	})

fetch의 단점으로는 헤더 - 바디 순서대로 처리하기 때문에 속도가 느리고 원하는 헤더에 원하는 데이터가 없는 경우 불러올 수 없을 수도 있다.
.then으로 Promise를 resolve하여 헤어를 먼저 확인하고
res.json()으로 json을 반환하여 다시 Promise를 실행함


fetch + async 사용

const fetchBitcoinPrice = async () => {
	try{
		const res = await fetch('http://api.cryptonator.com/api/ticker/btc-usd');
		const data = await res.json()
		console.log(data.ticker.price)
	}catch(e){
		console.log("somthing went wrong!!!!")
	}
}

AXIOS
javascript와 함께 작동하는 라이브러리, 헤드태그나나 바디태그에 src로 주소를 선언하여 사용
Node.js와 같은 문법을 사용

axios.get('http://api.cryptonator.com/api/ticker/btc-usd')
	.then(res => {
		console.log(res.data.ticker.price);
	})
	.catch(err=>{
		console.log("ERROR!",err)
	})


async사용하면 더 간단하게 할 수 있음

const fetchBitcoinPrice = async ()=>{
	try{
		const res = await axios.get('http://api.cryptonator.com/api/ticker/btc-usd')
		console.log(res.data.ticker.price);
	}catch(e){
		console.log("ERROR!",err)
	}
}


axios은 헤더를 지정할 수 있음
ex)async함수에서 const config = {headers: {Accept: 'application/json'}; 를 선언
혹은 여러개를 입력하여 헤더에 json을 지정할 수 있음
이 후 api가 json으로 응답하도록 설정

ex) 프로그램 검색앱

TVMASE API에서 api주소를 가져오기
URL: /search/shows?q=:query
Example: https://api.tvmaze.com/search/shows?q=girls







